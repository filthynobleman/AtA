cmake_minimum_required(VERSION 3.16.3 FATAL_ERROR)
project(AtA_Shared VERSION 1.0 LANGUAGES C)

list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake")

add_compile_options(-O3)


option(USE_DOUBLES "Use double precision for floating point values." ON)
set(ATA_GEMM "STRASSEN" CACHE STRING "Determine the matrix multiplication algorithm used by ATA. Can be STRASSEN or GEMM.")
set(ATA_MT_GEMM "STRASSEN" CACHE STRING "Determine the algorithm used by multi-threaded ATA for matrix multiplication threads. Can be STRASSEN or GEMM.")
set(ATA_MT_SYRK "ATA" CACHE STRING "Determine the algorithm used by multi-threaded ATA for A^T * A threds. Can be ATA or SYRK.")
set(WHICH_BLAS "MKL" CACHE STRING "Determine CBLAS implementation. Can be MKL or BLAS.")


if(USE_DOUBLES)
    set(DOUBLE_PRECISION "ON")
    message("Compiling with double precision floating point.")
else()
    message("Compiling with single precision floating point.")
endif()

if (ATA_MT_GEMM STREQUAL "STRASSEN")
    set(ATA_MT_USE_STRASSEN "ON")
    message("Multi-threaded ATA will use Strassen's algorithm on matrix multiplication threads.")
elseif(ATA_MT_GEMM STREQUAL "GEMM")
    message("Multi-threaded ATA will use cblas_?gemm on matrix multiplication threads.")
else()
    message(FATAL_ERROR "The selected GEMM algorithm (${ATA_MT_GEMM}) is not supported.")
endif()

if (ATA_MT_SYRK STREQUAL "ATA")
    set(ATA_MT_USE_ATA "ON")
    message("Multi-threaded ATA will use ATA algorithm on A^T * A threads.")
elseif(ATA_MT_GEMM STREQUAL "SYRK")
    message("Multi-threaded ATA will use cblas_?syrk on A^T * A threads.")
else()
    message(FATAL_ERROR "The selected SYRK algorithm (${ATA_MT_GEMM}) is not supported.")
endif()

if (ATA_GEMM STREQUAL "STRASSEN")
    set(ATA_USE_STRASSEN "ON")
    message("ATA will use Strassen's algorithm for matrix multiplication.")
elseif(ATA_GEMM STREQUAL "GEMM")
    message("ATA will use cblas_?gemm for matrix multiplication.")
else()
    message(FATAL_ERROR "The selected GEMM algorithm (${ATA_GEMM}) is not supported.")
endif()

add_executable(TestAtAShared test_ata.c ata.c strassen.c simulexec.c queue.c)
add_executable(TestSYRK test_syrk.c)

find_package(OpenMP REQUIRED)
if (OpenMP_FOUND)
    include_directories(${OpenMP_C_INCLUDE_DIRS})
    link_directories(${OpenMP_C_LIBRARIES})
    # target_link_libraries(TestAtAShared PRIVATE OpenMP::OpenMP_C)
else()
    message(FATAL_ERROR "OpenMP not found.")
endif()

if(${WHICH_BLAS} STREQUAL "MKL")
    message("Selected MKL BLAS implementation.")
    find_package(MKL REQUIRED)
    if (MKL_FOUND)
        set(USE_MKL "ON")
        include_directories(${MKL_INCLUDE_DIRS})
        link_directories(${MKL_LIBRARIES})
        target_link_libraries(TestAtAShared PRIVATE OpenMP::OpenMP_C mkl_intel_ilp64 mkl_core mkl_sequential m)
        find_package(TBB REQUIRED)
        if (TBB_FOUND)
            message("Found TBB")
            include_directories(${TBB_INCLUDE_DIRS})
            link_directories(${TBB_LIBRARIES})
            target_link_libraries(TestSYRK mkl_intel_ilp64 mkl_core mkl_tbb_thread pthread m ${TBB_IMPORTED_TARGETS})
        else()
            message(FATAL_ERROR "TBB not found.")
        endif()
    else()
        message(FATAL_ERROR "MKL not found")
    endif()
elseif(${WHICH_BLAS} STREQUAL "BLAS")
    message("Selected system default BLAS implementation.")
    find_package(BLAS REQUIRED)
    if (BLAS_FOUND)
        include_directories(${BLAS_INCLUDE_DIR})
        link_directories(${BLAS_LIBRARIES})
        target_link_libraries(TestAtAShared m blas ${BLAS_LIBRARIES}) 
        target_link_libraries(TestSYRK m blas ${BLAS_LIBRARIES}) 
    else()
        message(FATAL_ERROR "BLAS not found")
    endif()
else()
    message(FATAL_ERROR "The selected BLAS implementation (${WHICH_BLAS}) is not supported.")
endif()

configure_file(common.h.in ${CMAKE_SOURCE_DIR}/common.h)